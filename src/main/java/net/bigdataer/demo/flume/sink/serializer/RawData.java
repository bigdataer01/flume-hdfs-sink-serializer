package net.bigdataer.demo.flume.sink.serializer;

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class RawData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RawData\",\"fields\":[{\"name\":\"body\",\"type\":\"bytes\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.nio.ByteBuffer body;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public RawData() {}

  /**
   * All-args constructor.
   */
  public RawData(java.nio.ByteBuffer body) {
    this.body = body;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return body;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: body = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'body' field.
   */
  public java.nio.ByteBuffer getBody() {
    return body;
  }

  /**
   * Sets the value of the 'body' field.
   * @param value the value to set.
   */
  public void setBody(java.nio.ByteBuffer value) {
    this.body = value;
  }

  /** Creates a new RawData RecordBuilder */
  public static RawData.Builder newBuilder() {
    return new RawData.Builder();
  }

  /** Creates a new RawData RecordBuilder by copying an existing Builder */
  public static RawData.Builder newBuilder(RawData.Builder other) {
    return new RawData.Builder(other);
  }

  /** Creates a new RawData RecordBuilder by copying an existing RawData instance */
  public static RawData.Builder newBuilder(RawData other) {
    return new RawData.Builder(other);
  }

  /**
   * RecordBuilder for RawData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RawData>
    implements org.apache.avro.data.RecordBuilder<RawData> {

    private java.nio.ByteBuffer body;

    /** Creates a new Builder */
    private Builder() {
      super(RawData.SCHEMA$);
    }

    /** Creates a Builder by copying an existing Builder */
    private Builder(RawData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.body)) {
        this.body = data().deepCopy(fields()[0].schema(), other.body);
        fieldSetFlags()[0] = true;
      }
    }

    /** Creates a Builder by copying an existing RawData instance */
    private Builder(RawData other) {
            super(RawData.SCHEMA$);
      if (isValidValue(fields()[0], other.body)) {
        this.body = data().deepCopy(fields()[0].schema(), other.body);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'body' field */
    public java.nio.ByteBuffer getBody() {
      return body;
    }

    /** Sets the value of the 'body' field */
    public RawData.Builder setBody(java.nio.ByteBuffer value) {
      validate(fields()[0], value);
      this.body = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /** Checks whether the 'body' field has been set */
    public boolean hasBody() {
      return fieldSetFlags()[0];
    }

    /** Clears the value of the 'body' field */
    public RawData.Builder clearBody() {
      body = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public RawData build() {
      try {
        RawData record = new RawData();
        record.body = fieldSetFlags()[0] ? this.body : (java.nio.ByteBuffer) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
